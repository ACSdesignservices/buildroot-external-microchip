From 31d45c2f87c39942cac196d60e0c984589f769f8 Mon Sep 17 00:00:00 2001
Message-Id: <31d45c2f87c39942cac196d60e0c984589f769f8.1547150348.git.sandeep.sheriker@microchip.com>
In-Reply-To: <605d6dab5106587a59aaaa241cc1089a310704f0.1547150348.git.sandeep.sheriker@microchip.com>
References: <605d6dab5106587a59aaaa241cc1089a310704f0.1547150348.git.sandeep.sheriker@microchip.com>
From: Sandeep Sheriker M <sandeep.sheriker@microchip.com>
Date: Thu, 10 Jan 2019 12:58:40 -0700
Subject: [EGT][patch v5 3/3] imagecache: query mimetype using libmagic.

query mimetype using libmagic instead of checking it by
file extensions.

Signed-off-by: Sandeep Sheriker M <sandeep.sheriker@microchip.com>
---
 include/egt/imagecache.h |  3 ++
 src/imagecache.cpp       | 77 +++++++++++++++++++++++++++++++++++++++---------
 2 files changed, 66 insertions(+), 14 deletions(-)

diff --git a/include/egt/imagecache.h b/include/egt/imagecache.h
index 6b8da0b..ac00bcd 100644
--- a/include/egt/imagecache.h
+++ b/include/egt/imagecache.h
@@ -63,6 +63,9 @@ namespace egt
                         int old_width, int old_height,
                         int new_width, int new_height);
 
+                static std::string get_mime_type(const std::string& filename,
+                                                 const std::string& data);
+
                 std::map<std::string, shared_cairo_surface_t> m_cache;
             };
 
diff --git a/src/imagecache.cpp b/src/imagecache.cpp
index 289c8e7..3dab7a9 100644
--- a/src/imagecache.cpp
+++ b/src/imagecache.cpp
@@ -13,6 +13,7 @@
 #include <cassert>
 #include <iostream>
 #include <sstream>
+#include <magic.h>
 
 #ifdef HAVE_LIBJPEG
 #ifdef __cplusplus
@@ -69,10 +70,14 @@ namespace egt
                         string name = filename;
                         name.erase(0, 1);
 
-                        /**
-                         * @todo This should use MIME info and not filename.
-                         */
-                        if (name.find("png") != std::string::npos)
+                        //string data = std::string(reinterpret_cast<const char*>(read_resource_data(name.c_str())));
+                        auto data_len = read_resource_length(name.c_str());
+                        unsigned char data[data_len];
+                        read_resource(name.c_str(), data, data_len, 0);
+                        string mimetype = get_mime_type(std::string(), std::string(reinterpret_cast<const char*>(data)));
+                        DBG("mimetype of : " << filename << " is " << mimetype);
+
+                        if (mimetype.find("image/png") != std::string::npos)
                         {
                             image = shared_cairo_surface_t(
                                         cairo_image_surface_create_from_png_stream(
@@ -80,7 +85,7 @@ namespace egt
                                         cairo_surface_destroy);
                         }
 #ifdef HAVE_LIBJPEG
-                        else if (name.find("jpg") != std::string::npos)
+                        else if (mimetype.find("image/jpeg") != std::string::npos)
                         {
                             image = shared_cairo_surface_t(
                                         cairo_image_surface_create_from_jpeg_stream(
@@ -100,17 +105,17 @@ namespace egt
                         name.erase(0, 1);
                         name = ICON_PATH + name;
 
-                        /**
-                         * @todo This should use MIME info and not filename.
-                         */
-                        if (name.find("png") != std::string::npos)
+                        string mimetype = get_mime_type(name, std::string());
+                        DBG("mimetype of :" << filename << " is : " << mimetype << '\n');
+
+                        if (mimetype.find("image/png") != std::string::npos)
                         {
                             image = shared_cairo_surface_t(
                                         cairo_image_surface_create_from_png(name.c_str()),
                                         cairo_surface_destroy);
                         }
 #ifdef HAVE_LIBJPEG
-                        else if (name.find("jpg") != std::string::npos)
+                        else if (mimetype.find("image/jpeg") != std::string::npos)
                         {
                             image = shared_cairo_surface_t(
                                         cairo_image_surface_create_from_jpeg(name.c_str()),
@@ -132,14 +137,17 @@ namespace egt
                             name = image_path + filename;
                         DBG("loading: " << name);
 
-                        if (name.find("png") != std::string::npos)
+                        string mimetype = get_mime_type(name, std::string());
+                        DBG("mimetype of :" << filename << " is : " << mimetype << '\n');
+
+                        if (mimetype.find("image/png") != std::string::npos)
                         {
                             image = shared_cairo_surface_t(
                                         cairo_image_surface_create_from_png(name.c_str()),
                                         cairo_surface_destroy);
                         }
 #ifdef HAVE_LIBJPEG
-                        else if (name.find("jpg") != std::string::npos)
+                        else if (mimetype.find("image/jpeg") != std::string::npos)
                         {
                             image = shared_cairo_surface_t(
                                         cairo_image_surface_create_from_jpeg(name.c_str()),
@@ -231,10 +239,51 @@ namespace egt
                 return new_surface;
             }
 
+            std::string
+            ImageCache::get_mime_type(const std::string& filename, const std::string& data)
+            {
+                magic_t magic;
+                const char* mime = NULL;
 
-            ImageCache image_cache;
+                magic = magic_open(MAGIC_MIME);
+                if (magic)
+                {
 
-        }
+                    if (magic_load(magic, NULL) == -1)
+                    {
+                        magic_close(magic);
+                        return std::string();
+                    }
 
+                    if (!filename.empty())
+                    {
+                        mime = magic_file(magic, filename.c_str());
+                    }
+                    else if (!data.empty())
+                    {
+                        if (data.size() <= 0)
+                        {
+                            magic_close(magic);
+                            return std::string();
+                        }
+
+                        mime = magic_buffer(magic, (void*)data.c_str(), data.size());
+                    }
+
+                    if (mime)
+                    {
+                        string mimetype = std::string(mime);
+                        DBG(" In " << __func__ << " : " << mimetype );
+                        if (magic)
+                            magic_close(magic);
+
+                        return mimetype.substr(0, mimetype.find(' '));
+                    }
+                }
+                return std::string();
+            }
+
+            ImageCache image_cache;
+        }
     }
 }
-- 
2.7.4

