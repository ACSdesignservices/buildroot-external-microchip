From a845e7a390a09d12e2ece9dd3b7d92ca9f189793 Mon Sep 17 00:00:00 2001
From: Joshua Henderson <joshua.henderson@microchip.com>
Date: Tue, 21 May 2019 13:37:32 +0300
Subject: [PATCH] Support DRM/KMS planes in linuxfb DRM backend

This has two distinct ramifications:
- QT_QPA_EGLFS_KMS_PLANE_INDEX and QT_QPA_EGLFS_KMS_CONNECTOR_INDEX will now
  take effect when the linuxfb DRM backend is used and drmModeSetPlane() will
  be called.
- This does not support double buffering so it is disabled.

Signed-off-by: Joshua Henderson <joshua.henderson@microchip.com>
[eugen.hristev@microchip.com]: ported to QT 5.12.2
Signed-off-by: Eugen Hristev <eugen.hristev@microchip.com>
---
 ...RM-KMS-planes-in-linuxfb-DRM-backend.patch | 80 +++++++++++++++++++
 .../platforms/linuxfb/qlinuxfbdrmscreen.cpp   | 27 ++++++-
 2 files changed, 105 insertions(+), 2 deletions(-)
 create mode 100644 0001-Support-DRM-KMS-planes-in-linuxfb-DRM-backend.patch

diff --git a/0001-Support-DRM-KMS-planes-in-linuxfb-DRM-backend.patch b/0001-Support-DRM-KMS-planes-in-linuxfb-DRM-backend.patch
new file mode 100644
index 0000000000..f0b7f6c796
--- /dev/null
+++ b/0001-Support-DRM-KMS-planes-in-linuxfb-DRM-backend.patch
@@ -0,0 +1,80 @@
+From 58a3514a8091e255635695b6adb22b3acf4f00f2 Mon Sep 17 00:00:00 2001
+From: Joshua Henderson <joshua.henderson@microchip.com>
+Date: Tue, 21 May 2019 13:37:32 +0300
+Subject: [PATCH] Support DRM/KMS planes in linuxfb DRM backend
+
+This has two distinct ramifications:
+- QT_QPA_EGLFS_KMS_PLANE_INDEX and QT_QPA_EGLFS_KMS_CONNECTOR_INDEX will now
+  take effect when the linuxfb DRM backend is used and drmModeSetPlane() will
+  be called.
+- This does not support double buffering so it is disabled.
+
+Signed-off-by: Joshua Henderson <joshua.henderson@microchip.com>
+[eugen.hristev@microchip.com]: ported to QT 5.12.2
+Signed-off-by: Eugen Hristev <eugen.hristev@microchip.com>
+---
+ .../platforms/linuxfb/qlinuxfbdrmscreen.cpp   | 27 +++++++++++++++++--
+ 1 file changed, 25 insertions(+), 2 deletions(-)
+
+diff --git a/src/plugins/platforms/linuxfb/qlinuxfbdrmscreen.cpp b/src/plugins/platforms/linuxfb/qlinuxfbdrmscreen.cpp
+index 7f1cd2820a..b8f4f97e2e 100644
+--- a/src/plugins/platforms/linuxfb/qlinuxfbdrmscreen.cpp
++++ b/src/plugins/platforms/linuxfb/qlinuxfbdrmscreen.cpp
+@@ -59,7 +59,7 @@ QT_BEGIN_NAMESPACE
+ 
+ Q_LOGGING_CATEGORY(qLcFbDrm, "qt.qpa.fb")
+ 
+-static const int BUFFER_COUNT = 2;
++static const int BUFFER_COUNT = 1;
+ 
+ class QLinuxFbDevice : public QKmsDevice
+ {
+@@ -131,6 +131,11 @@ bool QLinuxFbDevice::open()
+         return false;
+     }
+ 
++    if (drmSetClientCap(fd, DRM_CLIENT_CAP_UNIVERSAL_PLANES, 1) < 0) {
++        qErrnoWarning("Could not set universal planes cap");
++        return false;
++    }
++
+     uint64_t hasDumbBuf = 0;
+     if (drmGetCap(fd, DRM_CAP_DUMB_BUFFER, &hasDumbBuf) == -1 || !hasDumbBuf) {
+         qWarning("Dumb buffers not supported");
+@@ -271,6 +276,24 @@ bool QLinuxFbDevice::createFramebuffer(QLinuxFbDevice::Output *output, int buffe
+         return false;
+     }
+ 
++    QKmsOutput &op(output->kmsOutput);
++    if (op.wants_forced_plane) {
++           if (!op.forced_plane_set) {
++                   op.forced_plane_set = true;
++                   qCDebug(qLcFbDrm, "forced_plane_set");
++                   if (op.wants_forced_plane) {
++                           qCDebug(qLcFbDrm, "drmModeSetPlane");
++
++                           int ret = drmModeSetPlane(fd(), op.plane_id, op.crtc_id,
++                                                     fb.fb, 0,
++                                                     0, 0, w, h,
++                                                     0 << 16, 0 << 16, w << 16, h << 16);
++                           if (ret == -1)
++                                   qErrnoWarning(errno, "drmModeSetPlane failed");
++                   }
++           }
++    }
++
+     drm_mode_map_dumb mreq = {
+         fb.handle,
+         0, 0
+@@ -449,7 +472,7 @@ QRegion QLinuxFbDrmScreen::doRedraw()
+ 
+     output->dirty[output->backFb] = QRegion();
+ 
+-    m_device->swapBuffers(output);
++    //m_device->swapBuffers(output);
+ 
+     return dirty;
+ }
+-- 
+2.21.0
+
diff --git a/src/plugins/platforms/linuxfb/qlinuxfbdrmscreen.cpp b/src/plugins/platforms/linuxfb/qlinuxfbdrmscreen.cpp
index 7f1cd2820a..ec75224558 100644
--- a/src/plugins/platforms/linuxfb/qlinuxfbdrmscreen.cpp
+++ b/src/plugins/platforms/linuxfb/qlinuxfbdrmscreen.cpp
@@ -59,7 +59,7 @@ QT_BEGIN_NAMESPACE
 
 Q_LOGGING_CATEGORY(qLcFbDrm, "qt.qpa.fb")
 
-static const int BUFFER_COUNT = 2;
+static const int BUFFER_COUNT = 1;
 
 class QLinuxFbDevice : public QKmsDevice
 {
@@ -131,6 +131,11 @@ bool QLinuxFbDevice::open()
         return false;
     }
 
+    if (drmSetClientCap(fd, DRM_CLIENT_CAP_UNIVERSAL_PLANES, 1) < 0) {
+        qErrnoWarning("Could not set universal planes cap");
+        return false;
+    }
+
     uint64_t hasDumbBuf = 0;
     if (drmGetCap(fd, DRM_CAP_DUMB_BUFFER, &hasDumbBuf) == -1 || !hasDumbBuf) {
         qWarning("Dumb buffers not supported");
@@ -271,6 +276,24 @@ bool QLinuxFbDevice::createFramebuffer(QLinuxFbDevice::Output *output, int buffe
         return false;
     }
 
+    QKmsOutput &op(output->kmsOutput);
+    if (op.wants_forced_plane) {
+           if (!op.forced_plane_set) {
+                   op.forced_plane_set = true;
+                   qCDebug(qLcFbDrm, "forced_plane_set");
+                   if (op.wants_forced_plane) {
+                           qCDebug(qLcFbDrm, "drmModeSetPlane");
+
+                           int ret = drmModeSetPlane(fd(), op.forced_plane_id, op.crtc_id,
+                                                     fb.fb, 0,
+                                                     0, 0, w, h,
+                                                     0 << 16, 0 << 16, w << 16, h << 16);
+                           if (ret == -1)
+                                   qErrnoWarning(errno, "drmModeSetPlane failed");
+                   }
+           }
+    }
+
     drm_mode_map_dumb mreq = {
         fb.handle,
         0, 0
@@ -449,7 +472,7 @@ QRegion QLinuxFbDrmScreen::doRedraw()
 
     output->dirty[output->backFb] = QRegion();
 
-    m_device->swapBuffers(output);
+    //m_device->swapBuffers(output);
 
     return dirty;
 }
-- 
2.21.0

